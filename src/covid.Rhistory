
my.packages <- c("readxl", "dplyr", "magrittr", "usmap", "ggplot2", "sf", "tidyr", "viridis", "animation", "spdep", "purrr", "rsatscan")
lapply(my.packages, library, character.only = TRUE)
population <- read_xlsx("./data/rawData/PopulationData/co-est2019-annres-53.xlsx", skip = 3, n_max = 40)
case <- read_xlsx("./data/rawData/COVID-19CaseData/WA_COVID19_Cases_Hospitalizations_Deaths.xlsx")
counties <- st_read("./data/rawData/Spatial/county10/county10.shp")
ls()
population$county <- sapply(population[,1], function(x){gsub("^[\\.]([^,]+)[,].*", "\\1", x)})
population %<>% select(county, pop2019 = `2019`) %>% 
  filter(!county%in%c("Washington"))
counties %<>% select(county = NAMELSAD10, geometry)
case %<>% select(county = County, week = WeekStartDate, total.cases = TotalCases) %>% 
  mutate(week = as.Date(week, format = "%Y-%m-%d")) %>%
  filter(!county%in%c("Unassigned"))
case.summary <- case %>% 
                  group_by(county) %>% 
                  summarise(n.obs = n(), 
                            min.case = min(total.cases), 
                            max.case = max(total.cases), 
                            cum.cases = sum(total.cases), 
                            peak.date = week[which.max(total.cases)]) %>% 
                  full_join(population, by="county") %>%
                  mutate(stdzd.cum.cases = cum.cases / pop2019 * 100000) %>%
                  arrange(desc(cum.cases))
shell.df <- expand.grid(county = unique(case$county), 
                        week = unique(case$week))
covid.weekly <- left_join(shell.df, case, by=c("county", "week")) %>% 
                  mutate(total.cases = ifelse(is.na(total.cases), 0, total.cases))
wa.covid <- covid.weekly %>% 
              group_by(week) %>% 
              summarise(n.cases = sum(total.cases))
plot(n.cases~week, data=wa.covid, type = "o")
date.labels <- seq(min(wa.covid$week), max(wa.covid$week), length.out = 19)
at.points <- seq(0.5, 54.5, by=1)[which(wa.covid$week%in%date.labels)]
weeks <- unique(covid.weekly$week)
weeks <- weeks[order(weeks)]
my.breaks <- c(0, 2, 4, 6, 8, 10, 15, 20, 30, 40, 50, 75, 100, 200, 500, 1000, 1500, 2000, 3000, 5000, 6000)
my.palette <- viridis(length(my.breaks)-1)
covid.weekly.wide.by.county <- covid.weekly[order(covid.weekly$county, covid.weekly$week),] %>% 
  pivot_wider(names_from = "county", values_from = "total.cases") 
names(covid.weekly.wide.by.county) <- gsub(" County", "", names(covid.weekly.wide.by.county))
cor.mat.by.county <- cor(covid.weekly.wide.by.county[,-1])
rates.of.change <- covid.weekly.wide.by.county
rates.of.change[,2:40] <- rbind(rates.of.change[-1,2:40] / rates.of.change[-nrow(rates.of.change),2:40], rep(NA, length(2:40)))
rates.of.change %<>% mutate_at(2:40, function(x){ifelse(is.infinite(x) | is.nan(x), NA, x)})
roc.cor.mat <- cor(rates.of.change[,2:40], use = "pairwise.complete.obs")
roc.cor.mat95 <- roc.cor.mat
roc.cor.mat95[which(roc.cor.mat95<0.95)] <- 0
roc.cor.mat9 <- roc.cor.mat
roc.cor.mat9[which(roc.cor.mat9<0.9)] <- 0
roc.cor.mat8 <- roc.cor.mat
roc.cor.mat8[which(roc.cor.mat8<0.8)] <- 0
roc.cor.mat6 <- roc.cor.mat
roc.cor.mat6[which(roc.cor.mat6<0.6)] <- 0
roc.cor.mat4 <- roc.cor.mat
roc.cor.mat4[which(roc.cor.mat4<0.4)] <- 0
roc.cor.mat0 <- roc.cor.mat
roc.cor.mat0[which(roc.cor.mat0<0)] <- 0
roc.cor.mat.neg <- roc.cor.mat
roc.cor.mat.neg[which(roc.cor.mat.neg>=0)] <- 0
roc.cor.mat.neg <- abs(roc.cor.mat.neg)
centroids <- st_centroid(st_geometry(counties))
neighbors.list <- poly2nb(counties)
nb.matrix <- nb2mat(neighbors.list, style = "B")
nb.matrix.weighted8 <- nb.matrix*roc.cor.mat8
nb.matrix.weighted6 <- nb.matrix*roc.cor.mat6
nb.matrix.weighted4 <- nb.matrix*roc.cor.mat4
nb.matrix.weighted0 <- nb.matrix*roc.cor.mat0
nb.matrix.weighted.neg <- nb.matrix*roc.cor.mat.neg
nb.weighted8 <- mat2listw(nb.matrix.weighted8)
nb.weighted6 <- mat2listw(nb.matrix.weighted6)
nb.weighted4 <- mat2listw(nb.matrix.weighted4)
nb.weighted0 <- mat2listw(nb.matrix.weighted0)
nb.weighted.neg <- mat2listw(nb.matrix.weighted.neg)
# png(filename = "./output/covid_incidence/rates_of_change_correlation_neighbors.png", height = 7, width = 7, units = "in", res = 300, pointsize = 12, family = "sans")
plot(counties$geometry, border = "grey")
plot(centroids, add=T)
# plot(nb.weighted.neg, st_coordinates(centroids), lwd = 1, lty = 1, col="red", points = F, add=T)
plot(nb.weighted0, st_coordinates(centroids), lwd = 1, points = F, add=T)
plot(nb.weighted4, st_coordinates(centroids), lwd = 4, points = F, add=T)
plot(nb.weighted6, st_coordinates(centroids), lwd = 8, lty = 1, points = F, add=T)
plot(nb.weighted8, st_coordinates(centroids), lwd = 16, points = F, add=T)
legend("bottomleft", lwd=c(1,4,8,16), legend = as.expression(lapply(c(0.0,0.4,0.6,0.8), function(x) bquote(rho>.(x)))), cex = 0.6, y.intersp = 2)
# dev.off()
diag(roc.cor.mat0) <- 0
diag(roc.cor.mat4) <- 0
diag(roc.cor.mat6) <- 0
diag(roc.cor.mat8) <- 0
diag(roc.cor.mat9) <- 0
diag(roc.cor.mat95) <- 0
roc.cor.lw0 <- mat2listw(roc.cor.mat0)
roc.cor.lw4 <- mat2listw(roc.cor.mat4)
roc.cor.lw6 <- mat2listw(roc.cor.mat6)
roc.cor.lw8 <- mat2listw(roc.cor.mat8)
roc.cor.lw9 <- mat2listw(roc.cor.mat9)
roc.cor.lw95 <- mat2listw(roc.cor.mat95)
plot(counties$geometry, border = "grey")
plot(centroids, add=T)
# plot(roc.cor.lw0, st_coordinates(centroids), add=T)
# plot(roc.cor.lw4, st_coordinates(centroids), add=T)
# plot(roc.cor.lw6, st_coordinates(centroids), lwd = 1, add=T)
plot(roc.cor.lw8, st_coordinates(centroids), lwd = 1, points = F, add=T)
plot(roc.cor.lw9, st_coordinates(centroids), lwd = 4, points = F, add=T)
plot(roc.cor.lw95, st_coordinates(centroids), lwd = 16, points = F, add=T)
# read aggregate fasta file
sequences <- readLines("./data/processedData/genbankSequences.noAmbiguous.mafftout.trimmed.fasta")
## parse individual sequences
### create dataframe with partitioned label and sequence 
#### since sequences are massive, don't try to view in RStudio
##### find lines that start with the > character
ids.index <- which(substr(sequences,1,1)==">")
##### shell dataframe to fill in
seq.df <- data.frame(ID=NA, county=NA, date=NA, sequence=NA)[-1,]
##### loop to parse each sequence, partition labels, and concatenate sequences across many lines
for(i in 1:length(ids.index)){
  seq.df[i,] <- c(
                  gsub(">|County", "", unlist(strsplit(sequences[ids.index[i]], split="_"))),
                  paste(sequences[{ids.index[i]+1}:{if(i==length(ids.index)){length(sequences)}else{ids.index[i+1]-1}}], collapse="")
                  )
}
### extract metadata from larger dataframe
#### easier to work with and view without sequences
metadata <- seq.df %>% select(ID, county, date) %>% mutate(date=as.Date(date))
sequences <- readLines("./data/processedData/subsample.fasta")
ids.index <- which(substr(sequences,1,1)==">")
##### shell dataframe to fill in
seq.df <- data.frame(ID=NA, county=NA, date=NA, sequence=NA)[-1,]
##### loop to parse each sequence, partition labels, and concatenate sequences across many lines
for(i in 1:length(ids.index)){
  seq.df[i,] <- c(
                  gsub(">|County", "", unlist(strsplit(sequences[ids.index[i]], split="_"))),
                  paste(sequences[{ids.index[i]+1}:{if(i==length(ids.index)){length(sequences)}else{ids.index[i+1]-1}}], collapse="")
                  )
}
metadata <- seq.df %>% select(ID, county, date) %>% mutate(date=as.Date(date))
nrow(metadata)
metadata[1:10,]
plot(counties$geometry, border = "grey")
plot(centroids, add=T)
# plot(nb.weighted.neg, st_coordinates(centroids), lwd = 1, lty = 1, col="red", points = F, add=T)
plot(nb.weighted0, st_coordinates(centroids), lwd = 1, points = F, add=T)
plot(nb.weighted4, st_coordinates(centroids), lwd = 4, points = F, add=T)
plot(nb.weighted6, st_coordinates(centroids), lwd = 8, lty = 1, points = F, add=T)
plot(nb.weighted8, st_coordinates(centroids), lwd = 16, points = F, add=T)
nb.weighted8
print(nb.weighted8, zero.policy=TRUE)
which(nb.matrix.weighted8>0.8)
which(nb.matrix.weighted8>0.8, arr.ind=T)
rownames(nb.matrix.weighted8)
nb.matrix.weighted[1:10,]
nb.matrix.weighted8[1:10,]
neighbors.list
summary(neighbors.list)
counties$county
counties$county
which(nb.matrix.weighted8>0.8, arr.ind=T)
which(nb.matrix.weighted8>0.8, arr.ind=T)[1,]
counties$county[c(3,11,39)]
counties$county[c(3,11,39)]%in%metadata$county
metadata$county
gsub(' County', '', counties$county[c(3,11,39)])%in%metadata$county
counties$county[c(3,11,39)]
gsub(' County', '', counties$county[c(3,11,39)])
metapop1 <- gsub(' County', '', counties$county[c(3,11,39)])
which(nb.matrix.weighted8>0.8, arr.ind=T)
gsub(' County', '', counties$county[c(17,27,31)])
metapop2 <- gsub(' County', '', counties$county[c(17,27,31)])
metadata$metapop <- ifelse(metadata$county%in%metapop1, "mp1", ifelse(metadata$county%in%metapop2, "mp2", "mp3"))
metadata[1:10,]
metapop2
metadata[20:50,]
metadata[200:500,]
chosen.seq.df <- full_join(metadata, seq.df%>%mutate(date=as.Date(date)), by=c("ID", "county", "date")) %>%
                  filter(chosen==1) %>% 
                  mutate(seqID = paste0(">",paste(ID, county, date, sep="_"))) %>%
()
chosen.seq.df <- full_join(metadata, seq.df%>%mutate(date=as.Date(date)), by=c("ID", "county", "date"))%>%filter(chosen=1)
nrow(metadata)
chosen.seq.df <- full_join(metadata, seq.df%>%mutate(date=as.Date(date)), by=c("ID", "county", "date"))%>%mutate(seqID = paste0(">", paste(ID, county, date, metapop, sep="_")))%>%select(seqID, sequence)
write.table(chosen.seq.df, file="./data/processedData/subsample_metapop_roc_cor.fasta", sep="\n", col.names=FALSE, row.names=FALSE, quote=FALSE)
west <- c("San Juan", "Whatcom", "Skagit", "Island", "Clallam", "Snohomish", "Jefferson", "Kitsap", "King", "Grays Harbor", "Mason", "Pierce", "Thurston", "Pacific", "Lewis", "Wahkiakum", "Cowlitz", "Skamania", "Clark")
table(west%in%metadata$county)
which(west%in%metadata$county)
which(!west%in%metadata$county)
west <- c("SanJuan", "Whatcom", "Skagit", "Island", "Clallam", "Snohomish", "Jefferson", "Kitsap", "King", "Grays Harbor", "Mason", "Pierce", "Thurston", "Pacific", "Lewis", "Wahkiakum", "Cowlitz", "Skamania", "Clark")
which(!west%in%metadata$county)
unique(metadata$county)
west <- c("SanJuan", "Whatcom", "Skagit", "Island", "Clallam", "Snohomish", "Jefferson", "Kitsap", "King", "GraysHarbor", "Mason", "Pierce", "Thurston", "Pacific", "Lewis", "Wahkiakum", "Cowlitz", "Skamania", "Clark")
unique(counties$county)
west
metadata$metapop <- ifelse(metadata$county%in%west, "west", "east"))
metadata$metapop <- ifelse(metadata$county%in%west, "west", "east")
metadata[1:10,]
which(metadata$metapop=="east")
unique(metadata$county[which(metadata$metapop=="east")])
chosen.seq.df <- full_join(metadata, seq.df%>%mutate(date=as.Date(date)), by=c("ID", "county", "date"))%>%mutate(seqID = paste0(">", paste(ID, county, date, metapop, sep="_")))%>%select(seqID, sequence)
write.table(chosen.seq.df, file="./data/processedData/subsample_metapop_east_west.fasta", sep="\n", col.names=FALSE, row.names=FALSE, quote=FALSE)
metapop.1 <- c(metapop1, metapop2, "Kitsap", "Skagit", "Whatcom")
table(metadata$metapop)
metadata$metapop <- ifelse(metadata$county%in%metapop1, "mp1", ifelse(metadata$county%in%metapop2, "mp2", "mp3"))
table(metadata$metapop)
metadata$metapop <- ifelse(metadata$county%in%metapop.1, "mp1", "mp2")
table(metadata$metapop)
chosen.seq.df <- full_join(metadata, seq.df%>%mutate(date=as.Date(date)), by=c("ID", "county", "date"))%>%mutate(seqID = paste0(">", paste(ID, county, date, metapop, sep="_")))%>%select(seqID, sequence)
write.table(chosen.seq.df, file="./data/processedData/subsample_metapop_roc_cor2.fasta", sep="\n", col.names=FALSE, row.names=FALSE, quote=FALSE)
weeks
i=6
weeks[c(i, i+1)]
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
weeks[c(i, i+1)]; i=i+1
getwd()
dir()
dir("./output/covid_incidence/satscan/by_week")
list.files("./output/covid_incidence/satscan/by_week")
list.files("./output/covid_incidence/satscan/by_week", full.path=T)
list.files("./output/covid_incidence/satscan/by_week", full=T)
satscan.files <- list.files("./output/covid_incidence/satscan/by_week", full=T)
readLines(satscan.files[1])
satscan.output <- list()
satscan.output[[1]] <- readLines(satscan.files[1])
satscan.output[[1]]
indices <- which(satscan.outpu[[1]]%in%c("CLUSTERS DETECTED", "PARAMETER SETTINGS"))
indices <- which(satscan.output[[1]]%in%c("CLUSTERS DETECTED", "PARAMETER SETTINGS"))
indices
clusters.detected <- satscan.output[[1]][indices[1]:indices[2]-1]
clusters.detected
for(i in 1:length(satscan.files)){satscan.output[[i]] <- readLines(satscan.files[i])}
warnings()
length(satscan.output)
clusters.detected <- list()
for(i in 1:length(satscan.output)){clusters.detected[[i]] <- satscan.output[[i]][which(satscan.output[[1]]%in%c("CLUSTERS DETECTED")):which(satscan.output[[1]]%in%c("PARAMETER SETTINGS"))-1]}
clusters.detected[[1]]
clusters.detected[[2]]
satscan.output[[3]]
for(i in 1:length(satscan.output)){clusters.detected[[i]] <- satscan.output[[i]][which(satscan.output[[i]]%in%c("CLUSTERS DETECTED")):which(satscan.output[[i]]%in%c("PARAMETER SETTINGS"))-1]}
satscan.output[[3]]
clusters.detected[[2]]
grepl("Location IDs included", clusters.detected[[2]])
which(grepl("Location IDs included", clusters.detected[[2]]))
individual.clusters <- c()
for(i in 1:length(clusters.detected)){
loc.indices <- which(grepl("Location IDs included", clusters.detected[[i]]))
overlap.indices <- which(grepl("Overlap with clusters", clusters.detected[[i]]))
each.cluster <- c()
for(ii in 1:length(loc.indices)){
each.cluster[ii] <- clusters.detected[[i]][loc.indices[ii]:overlap.indices[ii]-1]
}
individual.clusters <- c(individual.clusters, each.cluster)
}
warnings()
individual.clusters <- c()
for(i in 1:length(clusters.detected)){
loc.indices <- which(grepl("Location IDs included", clusters.detected[[i]]))
overlap.indices <- which(grepl("Overlap with clusters", clusters.detected[[i]]))
each.cluster <- c()
for(ii in 1:length(loc.indices)){
each.cluster[ii] <- paste(clusters.detected[[i]][loc.indices[ii]:overlap.indices[ii]-1])
}
individual.clusters <- c(individual.clusters, each.cluster)
}
warnings()
individual.clusters <- c()
for(i in 1:length(clusters.detected)){
loc.indices <- which(grepl("Location IDs included", clusters.detected[[i]]))
overlap.indices <- which(grepl("Overlap with clusters", clusters.detected[[i]]))
each.cluster <- c()
for(ii in 1:length(loc.indices)){
each.cluster[ii] <- paste(clusters.detected[[i]][loc.indices[ii]:overlap.indices[ii]-1], collapse="\n")
}
individual.clusters <- c(individual.clusters, each.cluster)
}
individual.clusters
individual.clusters <- c()
for(i in 1:length(clusters.detected)){
loc.indices <- which(grepl("Location IDs included", clusters.detected[[i]]))
overlap.indices <- which(grepl("Overlap with clusters", clusters.detected[[i]]))
each.cluster <- c()
for(ii in 1:length(loc.indices)){
each.cluster[ii] <- paste(clusters.detected[[i]][loc.indices[ii]:overlap.indices[ii]-1], collapse=", ")
}
individual.clusters <- c(individual.clusters, each.cluster)
}
individual.clusters
individual.clusters <- c()
for(i in 1:length(clusters.detected)){
loc.indices <- which(grepl("Location IDs included", clusters.detected[[i]]))
overlap.indices <- which(grepl("Overlap with clusters", clusters.detected[[i]]))
each.cluster <- c()
for(ii in 1:length(loc.indices)){
each.cluster[ii] <- paste(clusters.detected[[i]][loc.indices[ii]:overlap.indices[ii]-1], collapse="")
}
individual.clusters <- c(individual.clusters, each.cluster)
}
individual.clusters
gsub(".*Location IDs included.:", "", individual.clusters[1])
gsub(".*Location IDs included.: ", "", individual.clusters[1])
gsub(".*Location IDs included.: ", "", individual.clusters)
all.clusters <- gsub(".*Location IDs included.: ", "", individual.clusters)
strsplit(all.clusters[1], split="County")
strsplit(all.clusters[2], split="County")
gsub(", ", "", unlist(strsplit(all.clusters[2], split="County")))
gsub(", |[[:space:]]", "", unlist(strsplit(all.clusters[2], split="County")))
for(i in 1:length(all.clusters)){all.clusters[i] <- gsub(", |[[:space:]]", "", unlist(strsplit(all.clusters[i], split="County")))}
warnings()
all.clusters[1]
all.clusters[2]
all.clusters[3]
all.clusters <- gsub(".*Location IDs included.: ", "", individual.clusters)
all.clusters[2]
for(i in 1:length(all.clusters)){all.clusters[i] <- c(gsub(", |[[:space:]]", "", unlist(strsplit(all.clusters[i], split="County"))))}
warnings()
all.clusters <- gsub(".*Location IDs included.: ", "", individual.clusters)
all.clusters[1]
all.clusters[2]
counties.in.clusters <- list()
for(i in 1:length(all.clusters)){counties.in.clusters[[i]] <- c(gsub(", |[[:space:]]", "", unlist(strsplit(all.clusters[i], split="County"))))}
counties.in.clusters[[1]]
counties.in.clusters[[2]]
counties.in.clusters[[3]]
counties.in.clusters[[4]]
unique(counties$county)
gsub(" County", "", unique(counties$county))
cluster.df <- data.frame(county = gsub(" County", "", unique(counties$county)))
dim(cluster.df)
county.names <- gsub(" ", "", gsub(" County", "", unique(counties$county)))
cluster.df <- data.frame(county = county.names)
which(grepl(county.names[1], counties.in.clusters))
which(grepl(county.names[1], counties.in.clusters) & grepl(county.names[2], counties.in.clusters))
counties.in.clusters[[6]]
county.names[c(1,2)]
cluster.df[,county.names[1]] <- NA
names(cluster.df)
county.names <- gsub(" ", "", gsub(" County", "", unique(counties$county)))
cluster.df <- data.frame(county = county.names)
for(i in 1:length(county.names)){
cluster.df[,county.names[i]] <- NA
for(ii in 1:length(county.names)){
cluster.df[county.names[ii],county.names[i]] <- length(which(grepl(county.names[i], counties.in.clusters) & grepl(county.names[ii], counties.in.clusters)))
}
}
cluster.df[1:5,]
county.names <- gsub(" ", "", gsub(" County", "", unique(counties$county)))
cluster.df <- data.frame(county = county.names)
cluster.df[,county.names[1]] <- NA
county.names <- gsub(" ", "", gsub(" County", "", unique(counties$county)))
cluster.df <- data.frame(county = county.names)
for(i in 1:length(county.names)){
cluster.df[,county.names[i]] <- NA
for(ii in 1:length(county.names)){
cluster.df[which(cluster.df$county==county.names[ii]),county.names[i]] <- length(which(grepl(county.names[i], counties.in.clusters) & grepl(county.names[ii], counties.in.clusters)))
}
}
cluster.df[1:5,]
ncol(cluster.df)
cluster.matrix <- as.matrix(cluster.df[,2:40])
rownames(cluster.matrix) <- cluster.df$county
hist(diag(cluster.matrix))
quantile(diag(cluster.matrix))
which(diag(cluster.matrix)>66)
diag(cluster.matrix)
diag(cluster.matrix)[which(diag(cluster.matrix)>66)]
cluster.matrix.nd <- cluster.matrix
diag(cluster.matrix.nd) <- 0
hist(cluster.matrix[lower.tri(cluster.matrix)])
quantile(cluster.matrix[lower.tri(cluster.matrix)])
which(cluster.matrix[lower.tri(cluster.matrix)] >30)
which(cluster.matrix >30 & lower.tri(cluster.matrix))
hist(diag(cluster.matrix.nd))
cluster.matrix.nd[1:5,]
hist(cluster.matrix.nd[lower.tri(cluster.matrix.nd)])
which(cluster.matrix >30 & lower.tri(cluster.matrix), arr.ind=T)
